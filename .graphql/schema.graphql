schema {
  query: Query
}

type Artist {
  artist_id: Int
  concert_id: Int
  datetime: String
  uri: String
}

type Concert {
  artists: Artist
  city: String
  concert_id: Int
  datetime: String
  display_name: String
  lat: Float
  lng: Float
  popularity: String
  status: String
  type: String
  uri: String
}

type Concerts {
  edges: [Edge]
  pageInfo: PageInfo
  totalCount: Int
}

scalar Date

type Edge {
  cursor: String
  node: Concert
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPrevPage: Boolean
  startCursor: String
}

type Query {
  concert(id: Int!): Concert
  concerts(afterCursor: String, filters: String, first: Int!): Concerts!
}

type Status {
  success: Boolean
}

enum sortOrder {
  ASC
  DESC
}